generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String?           @unique
  userType          UserType          @default(UNVERIFIED)
  balance           Decimal           @default(0.00)
  createdAt         DateTime          @default(now())
  aadhaarCardUrl    String?
  aadhaarNumber     String?
  isKycVerified     Boolean           @default(false)
  panCardNumber     String?
  panCardUrl        String?
  phoneNumber       String            @unique
  updatedAt         DateTime          @default(now()) @updatedAt
  companyCIN        String?
  companyName       String?
  fullName          String?
  isAadhaarVerified Boolean           @default(false)
  isPanVerified     Boolean           @default(false)
  profilePhotoUrl   String?
  gstNumber         String?
  balanceRequests   BalanceRequest[]
  beneficiaries     Beneficiary[]
  documents         CompanyDocument[]
  directors         Director[]
  dmtBeneficiaries  DmtBeneficiary[]
  officePhotos      OfficePhoto[]
  sentTransactions  Transactions[]    @relation("SenderTransactions")
  upiBeneficiaries  UpiBeneficiary[]
  impsPermissions   Json? // Stores IMPS permissions as JSON
  upiPermissions    Json? // Stores UPI permissions as JSON
  dmtPermissions    Json? // Stores DMT permissions as JSON
  adjustedBalances  BalanceAdjustment[] @relation("AdjustedUser")
  madeAdjustments   BalanceAdjustment[] @relation("AdjustingAdmin")
  isDisabled        Boolean           @default(false)
}

model Director {
  id      String @id @default(cuid())
  name    String
  pan     String
  aadhaar String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

model CompanyDocument {
  id           String @id @default(cuid())
  documentType String
  url          String
  userId       String
  user         User   @relation(fields: [userId], references: [id])
}

model OfficePhoto {
  id     String @id @default(cuid())
  url    String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Beneficiary {
  id                String          @id @default(uuid())
  userId            String
  accountNumber     String
  accountHolderName String
  transactionType   TransactionType
  isVerified        Boolean         @default(false)
  createdAt         DateTime        @default(now())
  ifscCode          String?
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transactions[]

  @@unique([userId, accountNumber])
}

model UpiBeneficiary {
  id                String         @id @default(uuid())
  userId            String
  upiId             String
  accountHolderName String
  isVerified        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  transactions      Transactions[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, upiId])
}

model DmtBeneficiary {
  id                String         @id @default(uuid())
  userId            String
  accountNumber     String
  accountHolderName String
  ifscCode          String?
  isVerified        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transactions[]

  @@unique([userId, accountNumber])
}

model Transactions {
  id                String            @id @default(uuid())
  senderId          String?
  senderAccount     String
  beneficiaryId     String?
  amount            Decimal
  transactionType   TransactionType
  transactionStatus TransactionStatus @default(PENDING)
  transactionTime   DateTime          @default(now())
  createdAt         DateTime          @default(now())
  chargesAmount     Decimal
  referenceNo       String?
  upiBeneficiaryId  String?
  transactionId     String?
  websiteUrl        String?
  transaction_no    String?
  utr               String?
  gateway           String?
  dmtBeneficiaryId  String?
  dmthash              String?
  beneficiary       Beneficiary?      @relation(fields: [beneficiaryId], references: [id])
  dmtBeneficiary    DmtBeneficiary?   @relation(fields: [dmtBeneficiaryId], references: [id])
  sender            User?             @relation("SenderTransactions", fields: [senderId], references: [id])
  upiBeneficiary    UpiBeneficiary?   @relation(fields: [upiBeneficiaryId], references: [id])
}

model BalanceRequest {
  id              String               @id @default(uuid())
  userId          String
  amount          Decimal
  isConfirmed     Boolean              @default(false)
  requestedAt     DateTime             @default(now())
  UTRnumber       String
  isRejected      Boolean              @default(false)
  createdAt       DateTime             @default(now())
  status          BalanceRequestStatus @default(PENDING)
  previousBalance Decimal? // Store user's balance before this request was processed
  closingBalance  Decimal? // Store user's balance after this request was processed
  updatedAt       DateTime             @default(now()) @updatedAt
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TransactionCharge {
  id        String   @id @default(uuid())
  minAmount Decimal
  maxAmount Decimal
  charge    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Balance {
  id             String   @id @default(uuid())
  vishubhBalance Decimal  @default(0.00)
  kotalBalance   Decimal  @default(0.00)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model BankInfo {
  id        String   @id @default(uuid())
  name      String
  ifsc      String   @unique
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AdjustmentType {
  DEDUCTION
  ADDITION
}

model BalanceAdjustment {
  id              String         @id @default(uuid())
  userId          String
  adminId         String
  amount          Decimal
  type            AdjustmentType
  reason          String
  previousBalance Decimal
  closingBalance  Decimal
  createdAt       DateTime       @default(now())
  
  user            User           @relation("AdjustedUser", fields: [userId], references: [id])
  admin           User           @relation("AdjustingAdmin", fields: [adminId], references: [id])
}

enum UserType {
  ADMIN
  VERIFIED
  UNVERIFIED
  PROPRIETOR_VERIFIED
  PROPRIETOR_UNVERIFIED
  COMPANY_VERIFIED
  COMPANY_UNVERIFIED
}

enum TransactionType {
  NEFT
  IMPS
  UPI
  DMT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BalanceRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
